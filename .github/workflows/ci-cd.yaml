name: Flask CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - dev
      - master

jobs:
  # -----------------------------
  # Build Stage
  # -----------------------------
  build:
    name: Build Python Environment
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

  # -----------------------------
  # Lint Stage
  # -----------------------------
  lint:
    name: Lint with Pylint
    runs-on: ubuntu-22.04
    needs: build
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint

      - name: Lint with pylint
        run: |
          source .venv/bin/activate
          pylint --ignore=tests app utils

  # -----------------------------
  # Test Stage
  # -----------------------------
  test:
    name: Run Unit Tests
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run pytest
        run: |
          export PYTHONPATH=$(pwd)
          source .venv/bin/activate
          pytest tests/

    # -----------------------------
  # Deploy Stage
  # -----------------------------
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-22.04
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install kubectl, Helm & kind
      - name: Install tools
        run: |
          # kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install kubectl /usr/local/bin/kubectl
          
          # Helm
          curl -LO https://get.helm.sh/helm-v3.14.1-linux-amd64.tar.gz
          tar -zxvf helm-v3.14.1-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm

          # kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          kubectl version --client
          helm version
          kind version

      # Create temporary cluster
      - name: Create kind cluster
        run: kind create cluster --name ci-cluster

      # Set context automatically (kind does this by default)
      - name: Create namespace
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [ "$BRANCH" = "dev" ]; then
            kubectl create ns dev --dry-run=client -o yaml | kubectl apply -f -
          elif [ "$BRANCH" = "master" ]; then
            kubectl create ns prod --dry-run=client -o yaml | kubectl apply -f -
          fi

      # Install Prometheus CRDs
      - name: Install Prometheus CRDs
        run: |
          kubectl apply --validate=false -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
          kubectl apply --validate=false -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
          kubectl apply --validate=false -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml


      # Deploy ArgoCD
      - name: Apply ArgoCD
        run: |
          BRANCH="${GITHUB_REF##*/}"
          # Namespaces
          NS_ARGOCD="argocd"
          NS_GRAFANA="monitoring"

          # Ensure namespaces exist
          kubectl create ns $NS_ARGOCD --dry-run=client -o yaml | kubectl apply -f -
          kubectl create ns $NS_GRAFANA --dry-run=client -o yaml | kubectl apply -f -

          # Apply ArgoCD manifests recursively
          kubectl apply -n $NS_ARGOCD -f manifests/argocd/argo-cd/templates --recursive
      

      # Deploy Grafana via kubectl (raw manifests)
      - name: Deploy Grafana via Helm
        run: |
          NS_GRAFANA="monitoring"
          kubectl create ns $NS_GRAFANA --dry-run=client -o yaml | kubectl apply -f -
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install grafana grafana/grafana \
            --namespace $NS_GRAFANA \
            --values manifests/grafana/values.yaml \
            --wait
      
      
      

      # Deploy Helm chart
      - name: Deploy Helm chart
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [ "$BRANCH" = "dev" ]; then
              echo "Deploying to development namespace"
              helm upgrade --install flask-app-dev flask-chart/ \
                  --namespace dev --create-namespace -f flask-chart/values-dev.yaml --wait
          elif [ "$BRANCH" = "master" ]; then
              echo "Deploying to production namespace"
              docker build -t 315510/flask_final_project:latest .
              echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
              docker push 315510/flask_final_project:latest

              helm upgrade --install flask-app-prod flask-chart \
                  --namespace prod --create-namespace -f flask-chart/values-prod.yaml --wait
          fi